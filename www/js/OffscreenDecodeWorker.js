importScripts("./lib/lz4.js"),importScripts("./VideoDecoder.js"),importScripts("./ImageDecoder.js"),importScripts("./RgbHelpers.js"),importScripts("./Constants.js");var window_decoders=new Map,image_coding=["rgb","rgb32","rgb24","jpeg","png","png/P","png/L","webp","avif"],video_coding=[],all_encodings=(XpraVideoDecoderLoader.hasNativeDecoder()?video_coding.push("h264","vp8"):(console.warn("Offscreen decoding is available for images only"),console.warn("Please consider using Google Chrome 94+ in a secure (SSL or localhost) context for h264 offscreen decoding support.")),new Set(["void",...image_coding,...video_coding]));function send_decode_error(packet,error){packet[7]=null,self.postMessage({error:""+error,packet:packet})}var paint_worker=new Worker("PaintWorker.js");class WindowDecoder{constructor(wid,canvas,debug){this.wid=wid,paint_worker.postMessage({cmd:"canvas",wid:wid,canvas:canvas,debug:debug},[canvas]),this.debug=debug,this.init()}init(){this.image_decoder=new XpraImageDecoder,this.video_decoder=new XpraVideoDecoder,this.decode_queue=[],this.decode_queue_draining=!1}decode_error(packet,error){error=`failed to decode '${packet[6]}' draw packet sequence ${packet[8]}: `+error;console.error(error),packet[7]=null,send_decode_error(packet,error)}queue_draw_packet(packet){this.closed||(this.decode_queue.push(packet),this.decode_queue_draining)||this.process_decode_queue()}process_decode_queue(){this.decode_queue_draining=!0;var packet=this.decode_queue.shift();this.process_packet(packet).then(()=>{0<this.decode_queue.length?this.process_decode_queue():this.decode_queue_draining=!1},error=>{send_decode_error(packet,error)})}async process_packet(packet){var options,decode_time,coding=packet[6],start=performance.now();"eos"==coding&&this.video_decoder?this.video_decoder._close():("scroll"!=coding&&"void"!=coding&&(image_coding.includes(coding)?await this.image_decoder.convertToBitmap(packet):video_coding.includes(coding)?(this.video_decoder.initialized||this.video_decoder.init(coding),packet=await this.video_decoder.queue_frame(packet).catch(error=>{this.decode_error(packet,error)})):this.decode_error(packet,`unsupported encoding: '${coding}'`)),"throttle"==packet[6]&&await new Promise(r=>setTimeout(r,500)),options=packet[10]||{},decode_time=Math.round(1e3*(performance.now()-start)),options.decode_time=Math.max(0,decode_time),(decode_time=packet.map((x,i)=>{if(7!==i)return x}))[6]="offscreen-painted",decode_time[10]=options,self.postMessage({draw:decode_time,start:start}),"throttle"!=packet[6]&&paint_worker.postMessage({cmd:"paint",image:packet[7],wid:packet[1],coding:packet[6],x:packet[2],y:packet[3],w:packet[4],h:packet[5]},"scroll"==coding?[]:[packet[7]]))}eos(){var packet=[];packet[6]="eos",this.decode_queue.push(packet)}close(){paint_worker.postMessage({cmd:"remove",wid:this.wid}),this.closed||(this.closed=!0,this.eos())}}onmessage=function(e){var data=e.data,wd=null;switch(data.cmd){case"check":var common=[...data.encodings].filter(value=>all_encodings.has(value));self.postMessage({result:!0,formats:common});break;case"eos":(wd=window_decoders.get(data.wid))&&wd.eos();break;case"remove":(wd=window_decoders.get(data.wid))&&(wd.close(),window_decoders.delete(data.wid));break;case"decode":var common=data.packet,wid=common[1];(wd=window_decoders.get(wid))?wd.queue_draw_packet(common):send_decode_error(common,`no window decoder found for wid ${wid}, only:`+[...window_decoders.keys()].join(","));break;case"redraw":paint_worker.postMessage({cmd:data.cmd,wid:data.wid});break;case"canvas":console.log("canvas transfer for window",data.wid,":",data.canvas,data.debug),data.canvas&&window_decoders.set(data.wid,new WindowDecoder(data.wid,data.canvas,data.debug));break;case"canvas-geo":paint_worker.postMessage({cmd:data.cmd,w:data.w,h:data.h,wid:data.wid});break;default:console.error("Offscreen decode worker got unknown message: "+data.cmd)}};